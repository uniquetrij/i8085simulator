/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package me.uniquetrij.i8085.giu;

import me.uniquetrij.i8085.BCpair;
import me.uniquetrij.i8085.DEpair;
import me.uniquetrij.i8085.Flags;
import me.uniquetrij.i8085.HLpair;
import me.uniquetrij.i8085.IOunit;
import me.uniquetrij.i8085.Memory;
import me.uniquetrij.i8085.ProgramCounter;
import me.uniquetrij.i8085.RegisterA;
import me.uniquetrij.i8085.RegisterB;
import me.uniquetrij.i8085.RegisterC;
import me.uniquetrij.i8085.RegisterD;
import me.uniquetrij.i8085.RegisterE;
import me.uniquetrij.i8085.RegisterH;
import me.uniquetrij.i8085.RegisterL;
import me.uniquetrij.i8085.StackPointer;
import javax.swing.JOptionPane;

/**
 *
 * @author Uniquetrij
 */
@SuppressWarnings("serial")
public class MainWindow extends javax.swing.JFrame {

    private String about = "i8085 Simulator is an simulator for\n"
            + "Intel's 8085 Microprocessor Chip\n"
            + "which contains a built in assambler\n"
            + "and packed with an assembly editor."
            + "\n"
            + "\n"
            + "Author      : Uniquetrij (Trijeet Modak)"
            + "\n"
            + "Version     : 1.0.1"
            + "\n"
            + "Build Date : Dec 2012"
            + "\n\n"
            + "N.B.: Some options may not work properly as they\n"
            + "are yet to be implemented. But that won't\n"
            + "create any problem in executing programmes.\n"
            + "You can still continue working with the\n"
            + "basic functionality of the software and\n"
            + "programming in Intel's 8085 assembly Language.\n\n"
            + "For any Help or Suggestion please feel free\n"
            + "to contact me at uniquetrij@gmail.com";

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        assemblyEditor = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        clickLock = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        registerPanel = new javax.swing.JPanel();
        specialRegisterTable = new me.uniquetrij.i8085.giu.SpecialRegisterTable();
        flagsRegisterTable = new me.uniquetrij.i8085.giu.FlagsRegisterTable();
        pairsRegisterTable = new me.uniquetrij.i8085.giu.PairsRegisterTable();
        accumulatorTable = new me.uniquetrij.i8085.giu.AccumulatorTable();
        generalRegisterTable = new me.uniquetrij.i8085.giu.GeneralRegisterTable();
        tabbedPane = new javax.swing.JTabbedPane();
        memoryTable = new me.uniquetrij.i8085.giu.MemoryTable();
        iOTable = new me.uniquetrij.i8085.giu.IOTable();
        menuBar = new javax.swing.JMenuBar();
        menuReset = new javax.swing.JMenu();
        resetRegisters = new javax.swing.JMenu();
        resetAccumulator = new javax.swing.JMenuItem();
        resetGeneral = new javax.swing.JMenu();
        resetB = new javax.swing.JMenuItem();
        resetC = new javax.swing.JMenuItem();
        resetD = new javax.swing.JMenuItem();
        resetE = new javax.swing.JMenuItem();
        resetH = new javax.swing.JMenuItem();
        resetL = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        resetAllGeneral = new javax.swing.JMenuItem();
        resetSpecial = new javax.swing.JMenu();
        resetSP = new javax.swing.JMenuItem();
        resetPC = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        resetAllSpecial = new javax.swing.JMenuItem();
        resetPairs = new javax.swing.JMenu();
        resetBC = new javax.swing.JMenuItem();
        resetDE = new javax.swing.JMenuItem();
        resetHL = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        resetAllPairs = new javax.swing.JMenuItem();
        jSeparator11 = new javax.swing.JPopupMenu.Separator();
        resetAllRegisters = new javax.swing.JMenuItem();
        resetFlags = new javax.swing.JMenu();
        resetS = new javax.swing.JMenuItem();
        resetZ = new javax.swing.JMenuItem();
        resetAC = new javax.swing.JMenuItem();
        resetP = new javax.swing.JMenuItem();
        resetCY = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        resetAllFlags = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        resetMemory = new javax.swing.JMenuItem();
        resetIO = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        resetAll = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        helpContents = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        helpManual = new javax.swing.JMenuItem();
        helpTutorial = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        helpAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("i8085 Simulator");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        toolBar.setRollover(true);

        assemblyEditor.setText("assembly Editor");
        assemblyEditor.setFocusable(false);
        assemblyEditor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        assemblyEditor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        assemblyEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assemblyEditorActionPerformed(evt);
            }
        });
        toolBar.add(assemblyEditor);
        toolBar.add(jSeparator1);

        clickLock.setText("Single Click Lock");
        clickLock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clickLockActionPerformed(evt);
            }
        });
        toolBar.add(clickLock);
        toolBar.add(jSeparator2);

        registerPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        specialRegisterTable.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        specialRegisterTable.setToolTipText("Special Purpose Registers");
        specialRegisterTable.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        flagsRegisterTable.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        flagsRegisterTable.setToolTipText("Flags Register");
        flagsRegisterTable.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        pairsRegisterTable.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pairsRegisterTable.setToolTipText("Register Pairs");
        pairsRegisterTable.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        generalRegisterTable.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        generalRegisterTable.setToolTipText("General Purpose Registers");
        generalRegisterTable.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout registerPanelLayout = new javax.swing.GroupLayout(registerPanel);
        registerPanel.setLayout(registerPanelLayout);
        registerPanelLayout.setHorizontalGroup(
                registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(registerPanelLayout.createSequentialGroup()
                                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, registerPanelLayout.createSequentialGroup()
                                                .addComponent(specialRegisterTable, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(accumulatorTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addComponent(flagsRegisterTable, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(pairsRegisterTable, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(generalRegisterTable, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        registerPanelLayout.setVerticalGroup(
                registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(registerPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(generalRegisterTable, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(specialRegisterTable, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                                                .addComponent(accumulatorTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(flagsRegisterTable, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(pairsRegisterTable, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );

        tabbedPane.setToolTipText("");

        memoryTable.setToolTipText("Memory Table");
        tabbedPane.addTab("MemoryTable", memoryTable);

        iOTable.setToolTipText("Input/Output Ports Table");
        iOTable.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tabbedPane.addTab("I/O Ports Table", iOTable);

        menuReset.setMnemonic('R');
        menuReset.setText("Reset");

        resetRegisters.setText("Registers");

        resetAccumulator.setText("Accumulator");
        resetAccumulator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAccumulatorActionPerformed(evt);
            }
        });
        resetRegisters.add(resetAccumulator);

        resetGeneral.setText("General Purpose");

        resetB.setText("B");
        resetB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBActionPerformed(evt);
            }
        });
        resetGeneral.add(resetB);

        resetC.setText("C");
        resetC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCActionPerformed(evt);
            }
        });
        resetGeneral.add(resetC);

        resetD.setText("D");
        resetD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDActionPerformed(evt);
            }
        });
        resetGeneral.add(resetD);

        resetE.setText("E");
        resetE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetEActionPerformed(evt);
            }
        });
        resetGeneral.add(resetE);

        resetH.setText("H");
        resetH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetHActionPerformed(evt);
            }
        });
        resetGeneral.add(resetH);

        resetL.setText("L");
        resetL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetLActionPerformed(evt);
            }
        });
        resetGeneral.add(resetL);
        resetGeneral.add(jSeparator5);

        resetAllGeneral.setText("All");
        resetAllGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllGeneralActionPerformed(evt);
            }
        });
        resetGeneral.add(resetAllGeneral);

        resetRegisters.add(resetGeneral);

        resetSpecial.setText("Special Purpose");

        resetSP.setText("SP");
        resetSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSPActionPerformed(evt);
            }
        });
        resetSpecial.add(resetSP);

        resetPC.setText("PC");
        resetPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPCActionPerformed(evt);
            }
        });
        resetSpecial.add(resetPC);
        resetSpecial.add(jSeparator6);

        resetAllSpecial.setText("All");
        resetAllSpecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllSpecialActionPerformed(evt);
            }
        });
        resetSpecial.add(resetAllSpecial);

        resetRegisters.add(resetSpecial);

        resetPairs.setText("Register Pairs");

        resetBC.setText("BC");
        resetBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBCActionPerformed(evt);
            }
        });
        resetPairs.add(resetBC);

        resetDE.setText("DE");
        resetDE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDEActionPerformed(evt);
            }
        });
        resetPairs.add(resetDE);

        resetHL.setText("HL");
        resetHL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetHLActionPerformed(evt);
            }
        });
        resetPairs.add(resetHL);
        resetPairs.add(jSeparator7);

        resetAllPairs.setText("All");
        resetAllPairs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllPairsActionPerformed(evt);
            }
        });
        resetPairs.add(resetAllPairs);

        resetRegisters.add(resetPairs);
        resetRegisters.add(jSeparator11);

        resetAllRegisters.setText("All");
        resetAllRegisters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllRegistersActionPerformed(evt);
            }
        });
        resetRegisters.add(resetAllRegisters);

        menuReset.add(resetRegisters);

        resetFlags.setText("Flags");

        resetS.setText("S");
        resetS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSActionPerformed(evt);
            }
        });
        resetFlags.add(resetS);

        resetZ.setText("Z");
        resetZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetZActionPerformed(evt);
            }
        });
        resetFlags.add(resetZ);

        resetAC.setText("AC");
        resetAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetACActionPerformed(evt);
            }
        });
        resetFlags.add(resetAC);

        resetP.setText("P");
        resetP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPActionPerformed(evt);
            }
        });
        resetFlags.add(resetP);

        resetCY.setText("CY");
        resetCY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCYActionPerformed(evt);
            }
        });
        resetFlags.add(resetCY);
        resetFlags.add(jSeparator8);

        resetAllFlags.setText("All");
        resetAllFlags.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllFlagsActionPerformed(evt);
            }
        });
        resetFlags.add(resetAllFlags);

        menuReset.add(resetFlags);
        menuReset.add(jSeparator4);

        resetMemory.setText("Memory");
        resetMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetMemoryActionPerformed(evt);
            }
        });
        menuReset.add(resetMemory);

        resetIO.setText("I/O");
        resetIO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetIOActionPerformed(evt);
            }
        });
        menuReset.add(resetIO);
        menuReset.add(jSeparator3);

        resetAll.setText("All");
        resetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllActionPerformed(evt);
            }
        });
        menuReset.add(resetAll);

        menuBar.add(menuReset);

        menuHelp.setMnemonic('H');
        menuHelp.setText("Help");

        helpContents.setText("Help Contents");
        menuHelp.add(helpContents);
        menuHelp.add(jSeparator10);

        helpManual.setText("Simulator Manual");
        menuHelp.add(helpManual);

        helpTutorial.setText("Assambler Tutorial");
        menuHelp.add(helpTutorial);
        menuHelp.add(jSeparator9);

        helpAbout.setText("About");
        helpAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpAboutActionPerformed(evt);
            }
        });
        menuHelp.add(helpAbout);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(toolBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(registerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(registerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clickLockActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickLockActionPerformed
    {//GEN-HEADEREND:event_clickLockActionPerformed
        boolean cond = !clickLock.isSelected();
        this.accumulatorTable.setViewable(cond);
        this.generalRegisterTable.setViewable(cond);
        this.flagsRegisterTable.setViewable(cond);
        this.pairsRegisterTable.setViewable(cond);
        this.specialRegisterTable.setViewable(cond);
        this.memoryTable.setViewable(cond);
        this.iOTable.setViewable(cond);
    }//GEN-LAST:event_clickLockActionPerformed

    private void assemblyEditorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_assemblyEditorActionPerformed
    {//GEN-HEADEREND:event_assemblyEditorActionPerformed
        editor = new EditorNode(new EditorFrame(), editor);
        editor.frame.setVisible(true);
    }//GEN-LAST:event_assemblyEditorActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        while (editor != null && editor.frame.formWindowClosing(null)) {
            editor = editor.next;
        }
        if (editor == null) {
            dispose();
            return;
        }

        EditorNode p = editor.next, q = editor;
        while (p != null) {
            if (p.frame.formWindowClosing(null)) {
                p = p.next;
                q.next = p;
            } else {
                q.next = p;
                p = p.next;
            }
        }
        if (editor == null) {
            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    private void helpAboutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_helpAboutActionPerformed
    {//GEN-HEADEREND:event_helpAboutActionPerformed

        JOptionPane.showConfirmDialog(this, about, "About i8085 Simulator", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_helpAboutActionPerformed

    private void resetCActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetCActionPerformed
    {//GEN-HEADEREND:event_resetCActionPerformed
        RegisterC.RegisterC.reset();
    }//GEN-LAST:event_resetCActionPerformed

    private void resetAccumulatorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetAccumulatorActionPerformed
    {//GEN-HEADEREND:event_resetAccumulatorActionPerformed
        RegisterA.RegisterA.reset();
    }//GEN-LAST:event_resetAccumulatorActionPerformed

    private void resetZActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetZActionPerformed
    {//GEN-HEADEREND:event_resetZActionPerformed
        Flags.Flags.reset(Flags.Z);
    }//GEN-LAST:event_resetZActionPerformed

    private void resetBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetBActionPerformed
    {//GEN-HEADEREND:event_resetBActionPerformed
        RegisterB.RegisterB.reset();
    }//GEN-LAST:event_resetBActionPerformed

    private void resetDActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetDActionPerformed
    {//GEN-HEADEREND:event_resetDActionPerformed
        RegisterD.RegisterD.reset();
    }//GEN-LAST:event_resetDActionPerformed

    private void resetEActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetEActionPerformed
    {//GEN-HEADEREND:event_resetEActionPerformed
        RegisterE.RegisterE.reset();
    }//GEN-LAST:event_resetEActionPerformed

    private void resetHActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetHActionPerformed
    {//GEN-HEADEREND:event_resetHActionPerformed
        RegisterH.RegisterH.reset();
    }//GEN-LAST:event_resetHActionPerformed

    private void resetLActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetLActionPerformed
    {//GEN-HEADEREND:event_resetLActionPerformed
        RegisterL.RegisterL.reset();
    }//GEN-LAST:event_resetLActionPerformed

    private void resetAllGeneralActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetAllGeneralActionPerformed
    {//GEN-HEADEREND:event_resetAllGeneralActionPerformed
        RegisterB.RegisterB.reset();
        RegisterC.RegisterC.reset();
        RegisterD.RegisterD.reset();
        RegisterE.RegisterE.reset();
        RegisterH.RegisterH.reset();
        RegisterL.RegisterL.reset();
    }//GEN-LAST:event_resetAllGeneralActionPerformed

    private void resetSPActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetSPActionPerformed
    {//GEN-HEADEREND:event_resetSPActionPerformed
        StackPointer.StackPointer.reset();
    }//GEN-LAST:event_resetSPActionPerformed

    private void resetPCActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetPCActionPerformed
    {//GEN-HEADEREND:event_resetPCActionPerformed
        ProgramCounter.ProgramCounter.reset();
    }//GEN-LAST:event_resetPCActionPerformed

    private void resetAllSpecialActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetAllSpecialActionPerformed
    {//GEN-HEADEREND:event_resetAllSpecialActionPerformed
        StackPointer.StackPointer.reset();
        ProgramCounter.ProgramCounter.reset();
    }//GEN-LAST:event_resetAllSpecialActionPerformed

    private void resetBCActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetBCActionPerformed
    {//GEN-HEADEREND:event_resetBCActionPerformed
        BCpair.BCpair.reset();
    }//GEN-LAST:event_resetBCActionPerformed

    private void resetDEActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetDEActionPerformed
    {//GEN-HEADEREND:event_resetDEActionPerformed
        DEpair.DEpair.reset();
    }//GEN-LAST:event_resetDEActionPerformed

    private void resetHLActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetHLActionPerformed
    {//GEN-HEADEREND:event_resetHLActionPerformed
        HLpair.HLpair.reset();
    }//GEN-LAST:event_resetHLActionPerformed

    private void resetAllPairsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetAllPairsActionPerformed
    {//GEN-HEADEREND:event_resetAllPairsActionPerformed
        BCpair.BCpair.reset();
        DEpair.DEpair.reset();
        HLpair.HLpair.reset();
    }//GEN-LAST:event_resetAllPairsActionPerformed

    private void resetSActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetSActionPerformed
    {//GEN-HEADEREND:event_resetSActionPerformed
        Flags.Flags.reset(Flags.S);
    }//GEN-LAST:event_resetSActionPerformed

    private void resetACActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetACActionPerformed
    {//GEN-HEADEREND:event_resetACActionPerformed
        Flags.Flags.reset(Flags.AC);
    }//GEN-LAST:event_resetACActionPerformed

    private void resetPActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetPActionPerformed
    {//GEN-HEADEREND:event_resetPActionPerformed
        Flags.Flags.reset(Flags.P);
    }//GEN-LAST:event_resetPActionPerformed

    private void resetCYActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetCYActionPerformed
    {//GEN-HEADEREND:event_resetCYActionPerformed
        Flags.Flags.reset(Flags.CY);
    }//GEN-LAST:event_resetCYActionPerformed

    private void resetAllFlagsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetAllFlagsActionPerformed
    {//GEN-HEADEREND:event_resetAllFlagsActionPerformed
        Flags.Flags.reset();
    }//GEN-LAST:event_resetAllFlagsActionPerformed

    private void resetMemoryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetMemoryActionPerformed
    {//GEN-HEADEREND:event_resetMemoryActionPerformed
        Memory.Memory.reset();
    }//GEN-LAST:event_resetMemoryActionPerformed

    private void resetAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetAllActionPerformed
    {//GEN-HEADEREND:event_resetAllActionPerformed
        RegisterA.RegisterA.reset();
        RegisterB.RegisterB.reset();
        RegisterC.RegisterC.reset();
        RegisterD.RegisterD.reset();
        RegisterE.RegisterE.reset();
        RegisterH.RegisterH.reset();
        RegisterL.RegisterL.reset();
        Flags.Flags.reset();
        StackPointer.StackPointer.reset();
        ProgramCounter.ProgramCounter.reset();
        BCpair.BCpair.reset();
        DEpair.DEpair.reset();
        HLpair.HLpair.reset();
        Memory.Memory.reset();
        IOunit.IOunit.reset();
    }//GEN-LAST:event_resetAllActionPerformed

    private void resetIOActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetIOActionPerformed
    {//GEN-HEADEREND:event_resetIOActionPerformed
        IOunit.IOunit.reset();
    }//GEN-LAST:event_resetIOActionPerformed

    private void resetAllRegistersActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetAllRegistersActionPerformed
    {//GEN-HEADEREND:event_resetAllRegistersActionPerformed
        RegisterA.RegisterA.reset();
        RegisterB.RegisterB.reset();
        RegisterC.RegisterC.reset();
        RegisterD.RegisterD.reset();
        RegisterE.RegisterE.reset();
        RegisterH.RegisterH.reset();
        RegisterL.RegisterL.reset();
        StackPointer.StackPointer.reset();
        ProgramCounter.ProgramCounter.reset();
    }//GEN-LAST:event_resetAllRegistersActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private me.uniquetrij.i8085.giu.AccumulatorTable accumulatorTable;
    private javax.swing.JButton assemblyEditor;
    private javax.swing.JCheckBox clickLock;
    private me.uniquetrij.i8085.giu.FlagsRegisterTable flagsRegisterTable;
    private me.uniquetrij.i8085.giu.GeneralRegisterTable generalRegisterTable;
    private javax.swing.JMenuItem helpAbout;
    private javax.swing.JMenuItem helpContents;
    private javax.swing.JMenuItem helpManual;
    private javax.swing.JMenuItem helpTutorial;
    private me.uniquetrij.i8085.giu.IOTable iOTable;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private me.uniquetrij.i8085.giu.MemoryTable memoryTable;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenu menuReset;
    private me.uniquetrij.i8085.giu.PairsRegisterTable pairsRegisterTable;
    private javax.swing.JPanel registerPanel;
    private javax.swing.JMenuItem resetAC;
    private javax.swing.JMenuItem resetAccumulator;
    private javax.swing.JMenuItem resetAll;
    private javax.swing.JMenuItem resetAllFlags;
    private javax.swing.JMenuItem resetAllGeneral;
    private javax.swing.JMenuItem resetAllPairs;
    private javax.swing.JMenuItem resetAllRegisters;
    private javax.swing.JMenuItem resetAllSpecial;
    private javax.swing.JMenuItem resetB;
    private javax.swing.JMenuItem resetBC;
    private javax.swing.JMenuItem resetC;
    private javax.swing.JMenuItem resetCY;
    private javax.swing.JMenuItem resetD;
    private javax.swing.JMenuItem resetDE;
    private javax.swing.JMenuItem resetE;
    private javax.swing.JMenu resetFlags;
    private javax.swing.JMenu resetGeneral;
    private javax.swing.JMenuItem resetH;
    private javax.swing.JMenuItem resetHL;
    private javax.swing.JMenuItem resetIO;
    private javax.swing.JMenuItem resetL;
    private javax.swing.JMenuItem resetMemory;
    private javax.swing.JMenuItem resetP;
    private javax.swing.JMenuItem resetPC;
    private javax.swing.JMenu resetPairs;
    private javax.swing.JMenu resetRegisters;
    private javax.swing.JMenuItem resetS;
    private javax.swing.JMenuItem resetSP;
    private javax.swing.JMenu resetSpecial;
    private javax.swing.JMenuItem resetZ;
    private me.uniquetrij.i8085.giu.SpecialRegisterTable specialRegisterTable;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
    private EditorNode editor = null;

    private class EditorNode {

        public EditorFrame frame;
        public EditorNode next;

        public EditorNode(EditorFrame frame, EditorNode next) {
            this.frame = frame;
            this.next = next;
        }
    }
}
